@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin absoluteCenter($direction) {
  position: absolute;
  @if $direction == 'center' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @if $direction == 'left' {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $direction == 'top' {
    top: 50%;
    transform: translatey(-50%);
  }
}
@mixin bgcLine($color) {
  content: '';
  @include size(6rem, 0.4rem);
  @include absoluteCenter('left');
  background-color: $color;
  bottom: 0;
}
@mixin absoluteFull() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
//  mixin max-width
@mixin maxWidth($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}
// mixin min-width
@mixin minWidth($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin flexBox(
  $align-item: stretch,
  $justify-content: flex-start,
  $direction: row,
  $wrap: nowrap
) {
  display: flex;
  align-items: $align-item;
  justify-content: $justify-content;
  flex-direction: $direction;
  flex-wrap: $wrap;
}
// hidden scroll-bar
@mixin hiddenScroll() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}
@mixin textClamp($row, $size: 100%) {
  display: -webkit-box;
  -webkit-line-clamp: $row;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: pre-wrap;
  word-break: break-word;
}

@mixin hoverEffect($itemClass, $contentClass, $transform: 'true') {
  #{$itemClass} {
    position: relative;
    z-index: 2;
    &>* {
      transition: transform 0.3s linear;
      will-change: transform;
    }
    #{$contentClass} {
      opacity: 0;
      visibility: hidden;
      transition: all 0.25s linear;
      @include absoluteFull();
      background-image: linear-gradient(
        to right bottom,
        rgba($primary-color, 0.8),
        rgba($secondary-color, 0.8)
      );
      @include flexBox(center, center, column);
    }
    @if $transform == 'true' {
      &::after {
        content: '';
        @include absoluteFull();
        background-color: $third-color;
        z-index: -1;
        // will-change: transform;
        // transition: transform 0.3s linear;
      }
    }
    &:hover {
      #{$contentClass} {
        opacity: 1;
        visibility: visible;
      }
      @if $transform == 'true' {
        &>*{
        transform: translate(-1rem, -1rem);
        }// &::after {
        //   transform: translate(1rem, 1rem);
        // }
      }
    }
  }
}
@mixin touchSlider(
  $listClass,
  $itemClass,
  $width: 80%,
  $gap: 2.5rem,
  $padding: 1rem
) {
  #{$listClass} {
    display: grid !important;
    justify-content: flex-start !important;
    grid-auto-columns: $width;
    grid-auto-flow: column;
    grid-column-gap: $gap;
    grid-template-columns: unset;
    overflow-x: auto;
    padding: $padding;
    scroll-snap-type: x mandatory;
    scroll-snap-stop: always;
    @include hiddenScroll;
  }
  #{$itemClass} {
    scroll-snap-align: start;
    width: auto;
  }
}
@mixin color($config:()) {
  $config:extend(
    (color: red),
    $config
  );
  color: map-get($config, color);
}
